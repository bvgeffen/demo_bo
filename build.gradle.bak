/*
 * This buildscript shows how mlcp dependencies can be easily declared and then uses in a Gradle configuration named
 * "mlcp". This configuration is then used as the classpath for MlcpTask, which is a simple extension of Gradle's
 * JavaExec task that exposes a number of mlcp arguments as task attributes.
 */

buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath "com.marklogic:ml-gradle:3.2.0"
	}
}

apply plugin: "com.marklogic.ml-gradle"

repositories {
	jcenter()

	// Needed for mlcp dependencies
	maven { url "https://developer.marklogic.com/maven2/" }

	// Needed for hadoop dependencies for mlcp
	maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}


configurations {
	// This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
	// to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
	// shown below.  Need to force to use certain version of xml-apis library.
	mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {
	mlcp "com.marklogic:mlcp:8.0.6.3"

	/**
	 * If you need to import delimited text, be sure to include this dependency as well.
	 */
	mlcp "org.apache.commons:commons-csv:1.2"

	/**
	 * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
	 * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
	 * mlcp include a directory or some other resource that provides a log4j.properties file.
	 */
	mlcp files("lib")
}


/**
 * Ingest moonlight data
 */
task importMoonlight(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	port = 8061
	input_file_path = "data/moonlight_xml.xml"
	input_file_type = "aggregates"
	aggregate_record_element = "record"
	generate_uri = true
	output_collections = "data,moonlight"
	output_permissions = "rest-reader,read,rest-writer,update"
	transform_module = "/ext/transform_moonlight.xqy"
	transform_namespace = "http://marklogic.com/moonlight"
	/**
	 * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
	 * as a text document. This can also be a variable, Gradle property, etc.
	 */
	logOutputUri = "/moonlight_import_log.txt"
}

/**
 * Ingest burglary data
 */
 task importBurglary(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	port = 8061
	input_file_path = "data/burglary_xml.xml"
	input_file_type = "aggregates"
	aggregate_record_element = "record"
	generate_uri = true
	output_collections = "data,burglary"
	output_permissions = "rest-reader,read,rest-writer,update"
  transform_module = "/ext/transform_burglary.xqy"
	transform_namespace = "http://marklogic.com/burglary"
	
	/**
	 * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
	 * as a text document. This can also be a variable, Gradle property, etc.
	 */
	logOutputUri = "/burglary_import_log.txt"
}

/**
 * Ingest holiday data
 */
task importHoliday(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	port = 8061
	input_file_path = "data/holiday_xml.xml"
	input_file_type = "aggregates"
	aggregate_record_element = "record"
	generate_uri = true
	output_collections = "data,holiday"
	output_permissions = "rest-reader,read,rest-writer,update"
  transform_module = "/ext/transform_holiday.xqy"
	transform_namespace = "http://marklogic.com/holiday"
	
	/**
	 * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
	 * as a text document. This can also be a variable, Gradle property, etc.
	 */
	logOutputUri = "/holiday_import_log.txt"
}

/**
 * Ingest weather data
 */
task importWeather(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	port = 8061
	input_file_path = "data/weather_xml.xml"
	input_file_type = "aggregates"
	aggregate_record_element = "record"
	generate_uri = true
	output_collections = "data,weather"
	output_permissions = "rest-reader,read,rest-writer,update"
  transform_module = "/ext/transform_weather.xqy"
	transform_namespace = "http://marklogic.com/weather"
	
	/**
	 * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
	 * as a text document. This can also be a variable, Gradle property, etc.
	 */
	logOutputUri = "/weather_import_log.txt"
}